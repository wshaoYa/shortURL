// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sequenceFieldNames          = builder.RawFieldNames(&Sequence{})
	sequenceRows                = strings.Join(sequenceFieldNames, ",")
	sequenceRowsExpectAutoSet   = strings.Join(stringx.Remove(sequenceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sequenceRowsWithPlaceHolder = strings.Join(stringx.Remove(sequenceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePersonPracticeSequenceIdPrefix   = "cache:personPractice:sequence:id:"
	cachePersonPracticeSequenceStubPrefix = "cache:personPractice:sequence:stub:"
)

type (
	sequenceModel interface {
		Insert(ctx context.Context, data *Sequence) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Sequence, error)
		FindOneByStub(ctx context.Context, stub string) (*Sequence, error)
		Update(ctx context.Context, data *Sequence) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSequenceModel struct {
		sqlc.CachedConn
		table string
	}

	Sequence struct {
		Id        uint64    `db:"id"`
		Stub      string    `db:"stub"`
		Timestamp time.Time `db:"timestamp"`
	}
)

func newSequenceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSequenceModel {
	return &defaultSequenceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sequence`",
	}
}

func (m *defaultSequenceModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	personPracticeSequenceIdKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceIdPrefix, id)
	personPracticeSequenceStubKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceStubPrefix, data.Stub)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, personPracticeSequenceIdKey, personPracticeSequenceStubKey)
	return err
}

func (m *defaultSequenceModel) FindOne(ctx context.Context, id uint64) (*Sequence, error) {
	personPracticeSequenceIdKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceIdPrefix, id)
	var resp Sequence
	err := m.QueryRowCtx(ctx, &resp, personPracticeSequenceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sequenceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSequenceModel) FindOneByStub(ctx context.Context, stub string) (*Sequence, error) {
	personPracticeSequenceStubKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceStubPrefix, stub)
	var resp Sequence
	err := m.QueryRowIndexCtx(ctx, &resp, personPracticeSequenceStubKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `stub` = ? limit 1", sequenceRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, stub); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSequenceModel) Insert(ctx context.Context, data *Sequence) (sql.Result, error) {
	personPracticeSequenceIdKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceIdPrefix, data.Id)
	personPracticeSequenceStubKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceStubPrefix, data.Stub)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, sequenceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Stub, data.Timestamp)
	}, personPracticeSequenceIdKey, personPracticeSequenceStubKey)
	return ret, err
}

func (m *defaultSequenceModel) Update(ctx context.Context, newData *Sequence) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	personPracticeSequenceIdKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceIdPrefix, data.Id)
	personPracticeSequenceStubKey := fmt.Sprintf("%s%v", cachePersonPracticeSequenceStubPrefix, data.Stub)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sequenceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Stub, newData.Timestamp, newData.Id)
	}, personPracticeSequenceIdKey, personPracticeSequenceStubKey)
	return err
}

func (m *defaultSequenceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePersonPracticeSequenceIdPrefix, primary)
}

func (m *defaultSequenceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sequenceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSequenceModel) tableName() string {
	return m.table
}
